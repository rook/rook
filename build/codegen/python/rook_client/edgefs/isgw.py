"""
This file is automatically generated.
Do not modify.
"""

try:
    from typing import Any, Optional, Union, List
except ImportError:
    pass

from .._helper import _omit, CrdObject, CrdObjectList, CrdClass

class ClientsList(CrdObjectList):
    _items_type = str


class Config(CrdObject):
    _properties = [
        ('server', 'server', str, False, False),
        ('clients', 'clients', ClientsList, False, False)
    ]        

    def __init__(self,
                 server=_omit,  # type: Optional[str]
                 clients=_omit,  # type: Optional[Union[List[str], CrdObjectList]]
                 ):
        super(Config, self).__init__(
            server=server,
            clients=clients,
        )

    @property
    def server(self):
        # type: () -> str
        return self._property_impl('server')
    
    @server.setter
    def server(self, new_val):
        # type: (Optional[str]) -> None
        self._server = new_val
    
    @property
    def clients(self):
        # type: () -> Union[List[str], CrdObjectList]
        return self._property_impl('clients')
    
    @clients.setter
    def clients(self, new_val):
        # type: (Optional[Union[List[str], CrdObjectList]]) -> None
        self._clients = new_val


class Spec(CrdObject):
    _properties = [
        ('direction', 'direction', str, True, False),
        ('remoteURL', 'remoteURL', str, False, False),
        ('config', 'config', Config, False, False)
    ]        

    def __init__(self,
                 direction,  # type: str
                 remoteURL=_omit,  # type: Optional[str]
                 config=_omit,  # type: Optional[Config]
                 ):
        super(Spec, self).__init__(
            direction=direction,
            remoteURL=remoteURL,
            config=config,
        )

    @property
    def direction(self):
        # type: () -> str
        return self._property_impl('direction')
    
    @direction.setter
    def direction(self, new_val):
        # type: (str) -> None
        self._direction = new_val
    
    @property
    def remoteURL(self):
        # type: () -> str
        return self._property_impl('remoteURL')
    
    @remoteURL.setter
    def remoteURL(self, new_val):
        # type: (Optional[str]) -> None
        self._remoteURL = new_val
    
    @property
    def config(self):
        # type: () -> Config
        return self._property_impl('config')
    
    @config.setter
    def config(self, new_val):
        # type: (Optional[Config]) -> None
        self._config = new_val


class ISGW(CrdClass):
    _properties = [
        ('apiVersion', 'apiVersion', str, True, False),
        ('metadata', 'metadata', object, True, False),
        ('status', 'status', object, False, False),
        ('spec', 'spec', Spec, True, False)
    ]        

    def __init__(self,
                 apiVersion,  # type: str
                 metadata,  # type: Any
                 spec,  # type: Spec
                 status=_omit,  # type: Optional[Any]
                 ):
        super(ISGW, self).__init__(
            apiVersion=apiVersion,
            metadata=metadata,
            spec=spec,
            status=status,
        )

    @property
    def apiVersion(self):
        # type: () -> str
        return self._property_impl('apiVersion')
    
    @apiVersion.setter
    def apiVersion(self, new_val):
        # type: (str) -> None
        self._apiVersion = new_val
    
    @property
    def metadata(self):
        # type: () -> Any
        return self._property_impl('metadata')
    
    @metadata.setter
    def metadata(self, new_val):
        # type: (Any) -> None
        self._metadata = new_val
    
    @property
    def status(self):
        # type: () -> Any
        return self._property_impl('status')
    
    @status.setter
    def status(self, new_val):
        # type: (Optional[Any]) -> None
        self._status = new_val
    
    @property
    def spec(self):
        # type: () -> Spec
        return self._property_impl('spec')
    
    @spec.setter
    def spec(self, new_val):
        # type: (Spec) -> None
        self._spec = new_val
