"""
This file is automatically generated.
Do not modify.
"""

try:
    from typing import Any, Optional, Union, List
except ImportError:
    pass

from .._helper import _omit, CrdObject, CrdObjectList, CrdClass

class CephVersion(CrdObject):
    _properties = [
        ('allowUnsupported', 'allowUnsupported', bool, False, False),
        ('image', 'image', str, False, False)
    ]        

    def __init__(self,
                 allowUnsupported=_omit,  # type: Optional[bool]
                 image=_omit,  # type: Optional[str]
                 ):
        super(CephVersion, self).__init__(
            allowUnsupported=allowUnsupported,
            image=image,
        )

    @property
    def allowUnsupported(self):
        # type: () -> bool
        return self._property_impl('allowUnsupported')
    
    @allowUnsupported.setter
    def allowUnsupported(self, new_val):
        # type: (Optional[bool]) -> None
        self._allowUnsupported = new_val
    
    @property
    def image(self):
        # type: () -> str
        return self._property_impl('image')
    
    @image.setter
    def image(self, new_val):
        # type: (Optional[str]) -> None
        self._image = new_val


class Dashboard(CrdObject):
    _properties = [
        ('enabled', 'enabled', bool, False, False),
        ('urlPrefix', 'urlPrefix', str, False, False),
        ('port', 'port', int, False, False),
        ('ssl', 'ssl', bool, False, False)
    ]        

    def __init__(self,
                 enabled=_omit,  # type: Optional[bool]
                 urlPrefix=_omit,  # type: Optional[str]
                 port=_omit,  # type: Optional[int]
                 ssl=_omit,  # type: Optional[bool]
                 ):
        super(Dashboard, self).__init__(
            enabled=enabled,
            urlPrefix=urlPrefix,
            port=port,
            ssl=ssl,
        )

    @property
    def enabled(self):
        # type: () -> bool
        return self._property_impl('enabled')
    
    @enabled.setter
    def enabled(self, new_val):
        # type: (Optional[bool]) -> None
        self._enabled = new_val
    
    @property
    def urlPrefix(self):
        # type: () -> str
        return self._property_impl('urlPrefix')
    
    @urlPrefix.setter
    def urlPrefix(self, new_val):
        # type: (Optional[str]) -> None
        self._urlPrefix = new_val
    
    @property
    def port(self):
        # type: () -> int
        return self._property_impl('port')
    
    @port.setter
    def port(self, new_val):
        # type: (Optional[int]) -> None
        self._port = new_val
    
    @property
    def ssl(self):
        # type: () -> bool
        return self._property_impl('ssl')
    
    @ssl.setter
    def ssl(self, new_val):
        # type: (Optional[bool]) -> None
        self._ssl = new_val


class DisruptionManagement(CrdObject):
    _properties = [
        ('machineDisruptionBudgetNamespace', 'machineDisruptionBudgetNamespace', str, False, False),
        ('managePodBudgets', 'managePodBudgets', bool, False, False),
        ('osdMaintenanceTimeout', 'osdMaintenanceTimeout', int, False, False),
        ('manageMachineDisruptionBudgets', 'manageMachineDisruptionBudgets', bool, False, False)
    ]        

    def __init__(self,
                 machineDisruptionBudgetNamespace=_omit,  # type: Optional[str]
                 managePodBudgets=_omit,  # type: Optional[bool]
                 osdMaintenanceTimeout=_omit,  # type: Optional[int]
                 manageMachineDisruptionBudgets=_omit,  # type: Optional[bool]
                 ):
        super(DisruptionManagement, self).__init__(
            machineDisruptionBudgetNamespace=machineDisruptionBudgetNamespace,
            managePodBudgets=managePodBudgets,
            osdMaintenanceTimeout=osdMaintenanceTimeout,
            manageMachineDisruptionBudgets=manageMachineDisruptionBudgets,
        )

    @property
    def machineDisruptionBudgetNamespace(self):
        # type: () -> str
        return self._property_impl('machineDisruptionBudgetNamespace')
    
    @machineDisruptionBudgetNamespace.setter
    def machineDisruptionBudgetNamespace(self, new_val):
        # type: (Optional[str]) -> None
        self._machineDisruptionBudgetNamespace = new_val
    
    @property
    def managePodBudgets(self):
        # type: () -> bool
        return self._property_impl('managePodBudgets')
    
    @managePodBudgets.setter
    def managePodBudgets(self, new_val):
        # type: (Optional[bool]) -> None
        self._managePodBudgets = new_val
    
    @property
    def osdMaintenanceTimeout(self):
        # type: () -> int
        return self._property_impl('osdMaintenanceTimeout')
    
    @osdMaintenanceTimeout.setter
    def osdMaintenanceTimeout(self, new_val):
        # type: (Optional[int]) -> None
        self._osdMaintenanceTimeout = new_val
    
    @property
    def manageMachineDisruptionBudgets(self):
        # type: () -> bool
        return self._property_impl('manageMachineDisruptionBudgets')
    
    @manageMachineDisruptionBudgets.setter
    def manageMachineDisruptionBudgets(self, new_val):
        # type: (Optional[bool]) -> None
        self._manageMachineDisruptionBudgets = new_val


class Mon(CrdObject):
    _properties = [
        ('allowMultiplePerNode', 'allowMultiplePerNode', bool, False, False),
        ('count', 'count', int, False, False),
        ('volumeClaimTemplate', 'volumeClaimTemplate', object, False, False)
    ]        

    def __init__(self,
                 allowMultiplePerNode=_omit,  # type: Optional[bool]
                 count=_omit,  # type: Optional[int]
                 volumeClaimTemplate=_omit,  # type: Optional[Any]
                 ):
        super(Mon, self).__init__(
            allowMultiplePerNode=allowMultiplePerNode,
            count=count,
            volumeClaimTemplate=volumeClaimTemplate,
        )

    @property
    def allowMultiplePerNode(self):
        # type: () -> bool
        return self._property_impl('allowMultiplePerNode')
    
    @allowMultiplePerNode.setter
    def allowMultiplePerNode(self, new_val):
        # type: (Optional[bool]) -> None
        self._allowMultiplePerNode = new_val
    
    @property
    def count(self):
        # type: () -> int
        return self._property_impl('count')
    
    @count.setter
    def count(self, new_val):
        # type: (Optional[int]) -> None
        self._count = new_val
    
    @property
    def volumeClaimTemplate(self):
        # type: () -> Any
        return self._property_impl('volumeClaimTemplate')
    
    @volumeClaimTemplate.setter
    def volumeClaimTemplate(self, new_val):
        # type: (Optional[Any]) -> None
        self._volumeClaimTemplate = new_val


class ModulesItem(CrdObject):
    _properties = [
        ('name', 'name', str, False, False),
        ('enabled', 'enabled', bool, False, False)
    ]        

    def __init__(self,
                 name=_omit,  # type: Optional[str]
                 enabled=_omit,  # type: Optional[bool]
                 ):
        super(ModulesItem, self).__init__(
            name=name,
            enabled=enabled,
        )

    @property
    def name(self):
        # type: () -> str
        return self._property_impl('name')
    
    @name.setter
    def name(self, new_val):
        # type: (Optional[str]) -> None
        self._name = new_val
    
    @property
    def enabled(self):
        # type: () -> bool
        return self._property_impl('enabled')
    
    @enabled.setter
    def enabled(self, new_val):
        # type: (Optional[bool]) -> None
        self._enabled = new_val


class ModulesList(CrdObjectList):
    _items_type = ModulesItem


class Mgr(CrdObject):
    _properties = [
        ('modules', 'modules', ModulesList, False, False)
    ]        

    def __init__(self,
                 modules=_omit,  # type: Optional[Union[List[ModulesItem], CrdObjectList]]
                 ):
        super(Mgr, self).__init__(
            modules=modules,
        )

    @property
    def modules(self):
        # type: () -> Union[List[ModulesItem], CrdObjectList]
        return self._property_impl('modules')
    
    @modules.setter
    def modules(self, new_val):
        # type: (Optional[Union[List[ModulesItem], CrdObjectList]]) -> None
        self._modules = new_val


class Network(CrdObject):
    _properties = [
        ('hostNetwork', 'hostNetwork', bool, False, False),
        ('provider', 'provider', str, False, False),
        ('selectors', 'selectors', object, False, False)
    ]        

    def __init__(self,
                 hostNetwork=_omit,  # type: Optional[bool]
                 provider=_omit,  # type: Optional[str]
                 selectors=_omit,  # type: Optional[Any]
                 ):
        super(Network, self).__init__(
            hostNetwork=hostNetwork,
            provider=provider,
            selectors=selectors,
        )

    @property
    def hostNetwork(self):
        # type: () -> bool
        return self._property_impl('hostNetwork')
    
    @hostNetwork.setter
    def hostNetwork(self, new_val):
        # type: (Optional[bool]) -> None
        self._hostNetwork = new_val
    
    @property
    def provider(self):
        # type: () -> str
        return self._property_impl('provider')
    
    @provider.setter
    def provider(self, new_val):
        # type: (Optional[str]) -> None
        self._provider = new_val
    
    @property
    def selectors(self):
        # type: () -> Any
        return self._property_impl('selectors')
    
    @selectors.setter
    def selectors(self, new_val):
        # type: (Optional[Any]) -> None
        self._selectors = new_val


class Config(CrdObject):
    _properties = [
        ('metadataDevice', 'metadataDevice', str, False, False),
        ('storeType', 'storeType', str, False, False),
        ('databaseSizeMB', 'databaseSizeMB', str, False, False),
        ('walSizeMB', 'walSizeMB', str, False, False),
        ('journalSizeMB', 'journalSizeMB', str, False, False),
        ('osdsPerDevice', 'osdsPerDevice', str, False, False),
        ('encryptedDevice', 'encryptedDevice', str, False, False)
    ]        

    def __init__(self,
                 metadataDevice=_omit,  # type: Optional[str]
                 storeType=_omit,  # type: Optional[str]
                 databaseSizeMB=_omit,  # type: Optional[str]
                 walSizeMB=_omit,  # type: Optional[str]
                 journalSizeMB=_omit,  # type: Optional[str]
                 osdsPerDevice=_omit,  # type: Optional[str]
                 encryptedDevice=_omit,  # type: Optional[str]
                 ):
        super(Config, self).__init__(
            metadataDevice=metadataDevice,
            storeType=storeType,
            databaseSizeMB=databaseSizeMB,
            walSizeMB=walSizeMB,
            journalSizeMB=journalSizeMB,
            osdsPerDevice=osdsPerDevice,
            encryptedDevice=encryptedDevice,
        )

    @property
    def metadataDevice(self):
        # type: () -> str
        return self._property_impl('metadataDevice')
    
    @metadataDevice.setter
    def metadataDevice(self, new_val):
        # type: (Optional[str]) -> None
        self._metadataDevice = new_val
    
    @property
    def storeType(self):
        # type: () -> str
        return self._property_impl('storeType')
    
    @storeType.setter
    def storeType(self, new_val):
        # type: (Optional[str]) -> None
        self._storeType = new_val
    
    @property
    def databaseSizeMB(self):
        # type: () -> str
        return self._property_impl('databaseSizeMB')
    
    @databaseSizeMB.setter
    def databaseSizeMB(self, new_val):
        # type: (Optional[str]) -> None
        self._databaseSizeMB = new_val
    
    @property
    def walSizeMB(self):
        # type: () -> str
        return self._property_impl('walSizeMB')
    
    @walSizeMB.setter
    def walSizeMB(self, new_val):
        # type: (Optional[str]) -> None
        self._walSizeMB = new_val
    
    @property
    def journalSizeMB(self):
        # type: () -> str
        return self._property_impl('journalSizeMB')
    
    @journalSizeMB.setter
    def journalSizeMB(self, new_val):
        # type: (Optional[str]) -> None
        self._journalSizeMB = new_val
    
    @property
    def osdsPerDevice(self):
        # type: () -> str
        return self._property_impl('osdsPerDevice')
    
    @osdsPerDevice.setter
    def osdsPerDevice(self, new_val):
        # type: (Optional[str]) -> None
        self._osdsPerDevice = new_val
    
    @property
    def encryptedDevice(self):
        # type: () -> str
        return self._property_impl('encryptedDevice')
    
    @encryptedDevice.setter
    def encryptedDevice(self, new_val):
        # type: (Optional[str]) -> None
        self._encryptedDevice = new_val


class DirectoriesItem(CrdObject):
    _properties = [
        ('path', 'path', str, False, False)
    ]        

    def __init__(self,
                 path=_omit,  # type: Optional[str]
                 ):
        super(DirectoriesItem, self).__init__(
            path=path,
        )

    @property
    def path(self):
        # type: () -> str
        return self._property_impl('path')
    
    @path.setter
    def path(self, new_val):
        # type: (Optional[str]) -> None
        self._path = new_val


class DirectoriesList(CrdObjectList):
    _items_type = DirectoriesItem


class DevicesItem(CrdObject):
    _properties = [
        ('name', 'name', str, False, False),
        ('config', 'config', object, False, False)
    ]        

    def __init__(self,
                 name=_omit,  # type: Optional[str]
                 config=_omit,  # type: Optional[Any]
                 ):
        super(DevicesItem, self).__init__(
            name=name,
            config=config,
        )

    @property
    def name(self):
        # type: () -> str
        return self._property_impl('name')
    
    @name.setter
    def name(self, new_val):
        # type: (Optional[str]) -> None
        self._name = new_val
    
    @property
    def config(self):
        # type: () -> Any
        return self._property_impl('config')
    
    @config.setter
    def config(self, new_val):
        # type: (Optional[Any]) -> None
        self._config = new_val


class DevicesList(CrdObjectList):
    _items_type = DevicesItem


class NodesItem(CrdObject):
    _properties = [
        ('name', 'name', str, False, False),
        ('config', 'config', Config, False, False),
        ('useAllDevices', 'useAllDevices', bool, False, False),
        ('deviceFilter', 'deviceFilter', str, False, False),
        ('devicePathFilter', 'devicePathFilter', str, False, False),
        ('directories', 'directories', DirectoriesList, False, False),
        ('devices', 'devices', DevicesList, False, False),
        ('resources', 'resources', object, False, False)
    ]        

    def __init__(self,
                 name=_omit,  # type: Optional[str]
                 config=_omit,  # type: Optional[Config]
                 useAllDevices=_omit,  # type: Optional[bool]
                 deviceFilter=_omit,  # type: Optional[str]
                 devicePathFilter=_omit,  # type: Optional[str]
                 directories=_omit,  # type: Optional[Union[List[DirectoriesItem], CrdObjectList]]
                 devices=_omit,  # type: Optional[Union[List[DevicesItem], CrdObjectList]]
                 resources=_omit,  # type: Optional[Any]
                 ):
        super(NodesItem, self).__init__(
            name=name,
            config=config,
            useAllDevices=useAllDevices,
            deviceFilter=deviceFilter,
            devicePathFilter=devicePathFilter,
            directories=directories,
            devices=devices,
            resources=resources,
        )

    @property
    def name(self):
        # type: () -> str
        return self._property_impl('name')
    
    @name.setter
    def name(self, new_val):
        # type: (Optional[str]) -> None
        self._name = new_val
    
    @property
    def config(self):
        # type: () -> Config
        return self._property_impl('config')
    
    @config.setter
    def config(self, new_val):
        # type: (Optional[Config]) -> None
        self._config = new_val
    
    @property
    def useAllDevices(self):
        # type: () -> bool
        return self._property_impl('useAllDevices')
    
    @useAllDevices.setter
    def useAllDevices(self, new_val):
        # type: (Optional[bool]) -> None
        self._useAllDevices = new_val
    
    @property
    def deviceFilter(self):
        # type: () -> str
        return self._property_impl('deviceFilter')
    
    @deviceFilter.setter
    def deviceFilter(self, new_val):
        # type: (Optional[str]) -> None
        self._deviceFilter = new_val
    
    @property
    def devicePathFilter(self):
        # type: () -> str
        return self._property_impl('devicePathFilter')
    
    @devicePathFilter.setter
    def devicePathFilter(self, new_val):
        # type: (Optional[str]) -> None
        self._devicePathFilter = new_val
    
    @property
    def directories(self):
        # type: () -> Union[List[DirectoriesItem], CrdObjectList]
        return self._property_impl('directories')
    
    @directories.setter
    def directories(self, new_val):
        # type: (Optional[Union[List[DirectoriesItem], CrdObjectList]]) -> None
        self._directories = new_val
    
    @property
    def devices(self):
        # type: () -> Union[List[DevicesItem], CrdObjectList]
        return self._property_impl('devices')
    
    @devices.setter
    def devices(self, new_val):
        # type: (Optional[Union[List[DevicesItem], CrdObjectList]]) -> None
        self._devices = new_val
    
    @property
    def resources(self):
        # type: () -> Any
        return self._property_impl('resources')
    
    @resources.setter
    def resources(self, new_val):
        # type: (Optional[Any]) -> None
        self._resources = new_val


class NodesList(CrdObjectList):
    _items_type = NodesItem


class Storage(CrdObject):
    _properties = [
        ('disruptionManagement', 'disruptionManagement', DisruptionManagement, False, False),
        ('useAllNodes', 'useAllNodes', bool, False, False),
        ('nodes', 'nodes', NodesList, False, False),
        ('useAllDevices', 'useAllDevices', bool, False, False),
        ('deviceFilter', 'deviceFilter', str, False, False),
        ('devicePathFilter', 'devicePathFilter', str, False, False),
        ('directories', 'directories', DirectoriesList, False, False),
        ('config', 'config', object, False, False),
        ('storageClassDeviceSets', 'storageClassDeviceSets', object, False, False)
    ]        

    def __init__(self,
                 disruptionManagement=_omit,  # type: Optional[DisruptionManagement]
                 useAllNodes=_omit,  # type: Optional[bool]
                 nodes=_omit,  # type: Optional[Union[List[NodesItem], CrdObjectList]]
                 useAllDevices=_omit,  # type: Optional[bool]
                 deviceFilter=_omit,  # type: Optional[str]
                 devicePathFilter=_omit,  # type: Optional[str]
                 directories=_omit,  # type: Optional[Union[List[DirectoriesItem], CrdObjectList]]
                 config=_omit,  # type: Optional[Any]
                 storageClassDeviceSets=_omit,  # type: Optional[Any]
                 ):
        super(Storage, self).__init__(
            disruptionManagement=disruptionManagement,
            useAllNodes=useAllNodes,
            nodes=nodes,
            useAllDevices=useAllDevices,
            deviceFilter=deviceFilter,
            devicePathFilter=devicePathFilter,
            directories=directories,
            config=config,
            storageClassDeviceSets=storageClassDeviceSets,
        )

    @property
    def disruptionManagement(self):
        # type: () -> DisruptionManagement
        return self._property_impl('disruptionManagement')
    
    @disruptionManagement.setter
    def disruptionManagement(self, new_val):
        # type: (Optional[DisruptionManagement]) -> None
        self._disruptionManagement = new_val
    
    @property
    def useAllNodes(self):
        # type: () -> bool
        return self._property_impl('useAllNodes')
    
    @useAllNodes.setter
    def useAllNodes(self, new_val):
        # type: (Optional[bool]) -> None
        self._useAllNodes = new_val
    
    @property
    def nodes(self):
        # type: () -> Union[List[NodesItem], CrdObjectList]
        return self._property_impl('nodes')
    
    @nodes.setter
    def nodes(self, new_val):
        # type: (Optional[Union[List[NodesItem], CrdObjectList]]) -> None
        self._nodes = new_val
    
    @property
    def useAllDevices(self):
        # type: () -> bool
        return self._property_impl('useAllDevices')
    
    @useAllDevices.setter
    def useAllDevices(self, new_val):
        # type: (Optional[bool]) -> None
        self._useAllDevices = new_val
    
    @property
    def deviceFilter(self):
        # type: () -> str
        return self._property_impl('deviceFilter')
    
    @deviceFilter.setter
    def deviceFilter(self, new_val):
        # type: (Optional[str]) -> None
        self._deviceFilter = new_val
    
    @property
    def devicePathFilter(self):
        # type: () -> str
        return self._property_impl('devicePathFilter')
    
    @devicePathFilter.setter
    def devicePathFilter(self, new_val):
        # type: (Optional[str]) -> None
        self._devicePathFilter = new_val
    
    @property
    def directories(self):
        # type: () -> Union[List[DirectoriesItem], CrdObjectList]
        return self._property_impl('directories')
    
    @directories.setter
    def directories(self, new_val):
        # type: (Optional[Union[List[DirectoriesItem], CrdObjectList]]) -> None
        self._directories = new_val
    
    @property
    def config(self):
        # type: () -> Any
        return self._property_impl('config')
    
    @config.setter
    def config(self, new_val):
        # type: (Optional[Any]) -> None
        self._config = new_val
    
    @property
    def storageClassDeviceSets(self):
        # type: () -> Any
        return self._property_impl('storageClassDeviceSets')
    
    @storageClassDeviceSets.setter
    def storageClassDeviceSets(self, new_val):
        # type: (Optional[Any]) -> None
        self._storageClassDeviceSets = new_val


class Monitoring(CrdObject):
    _properties = [
        ('enabled', 'enabled', bool, False, False),
        ('rulesNamespace', 'rulesNamespace', str, False, False)
    ]        

    def __init__(self,
                 enabled=_omit,  # type: Optional[bool]
                 rulesNamespace=_omit,  # type: Optional[str]
                 ):
        super(Monitoring, self).__init__(
            enabled=enabled,
            rulesNamespace=rulesNamespace,
        )

    @property
    def enabled(self):
        # type: () -> bool
        return self._property_impl('enabled')
    
    @enabled.setter
    def enabled(self, new_val):
        # type: (Optional[bool]) -> None
        self._enabled = new_val
    
    @property
    def rulesNamespace(self):
        # type: () -> str
        return self._property_impl('rulesNamespace')
    
    @rulesNamespace.setter
    def rulesNamespace(self, new_val):
        # type: (Optional[str]) -> None
        self._rulesNamespace = new_val


class RbdMirroring(CrdObject):
    _properties = [
        ('workers', 'workers', int, False, False)
    ]        

    def __init__(self,
                 workers=_omit,  # type: Optional[int]
                 ):
        super(RbdMirroring, self).__init__(
            workers=workers,
        )

    @property
    def workers(self):
        # type: () -> int
        return self._property_impl('workers')
    
    @workers.setter
    def workers(self, new_val):
        # type: (Optional[int]) -> None
        self._workers = new_val


class External(CrdObject):
    _properties = [
        ('enable', 'enable', bool, False, False)
    ]        

    def __init__(self,
                 enable=_omit,  # type: Optional[bool]
                 ):
        super(External, self).__init__(
            enable=enable,
        )

    @property
    def enable(self):
        # type: () -> bool
        return self._property_impl('enable')
    
    @enable.setter
    def enable(self, new_val):
        # type: (Optional[bool]) -> None
        self._enable = new_val


class Spec(CrdObject):
    _properties = [
        ('annotations', 'annotations', object, False, False),
        ('cephVersion', 'cephVersion', CephVersion, False, False),
        ('dashboard', 'dashboard', Dashboard, False, False),
        ('dataDirHostPath', 'dataDirHostPath', str, False, False),
        ('disruptionManagement', 'disruptionManagement', DisruptionManagement, False, False),
        ('skipUpgradeChecks', 'skipUpgradeChecks', bool, False, False),
        ('continueUpgradeAfterChecksEvenIfNotHealthy', 'continueUpgradeAfterChecksEvenIfNotHealthy', bool, False, False),
        ('mon', 'mon', Mon, False, False),
        ('mgr', 'mgr', Mgr, False, False),
        ('network', 'network', Network, False, False),
        ('storage', 'storage', Storage, False, False),
        ('monitoring', 'monitoring', Monitoring, False, False),
        ('rbdMirroring', 'rbdMirroring', RbdMirroring, False, False),
        ('removeOSDsIfOutAndSafeToRemove', 'removeOSDsIfOutAndSafeToRemove', bool, False, False),
        ('external', 'external', External, False, False),
        ('placement', 'placement', object, False, False),
        ('resources', 'resources', object, False, False)
    ]        

    def __init__(self,
                 annotations=_omit,  # type: Optional[Any]
                 cephVersion=_omit,  # type: Optional[CephVersion]
                 dashboard=_omit,  # type: Optional[Dashboard]
                 dataDirHostPath=_omit,  # type: Optional[str]
                 disruptionManagement=_omit,  # type: Optional[DisruptionManagement]
                 skipUpgradeChecks=_omit,  # type: Optional[bool]
                 continueUpgradeAfterChecksEvenIfNotHealthy=_omit,  # type: Optional[bool]
                 mon=_omit,  # type: Optional[Mon]
                 mgr=_omit,  # type: Optional[Mgr]
                 network=_omit,  # type: Optional[Network]
                 storage=_omit,  # type: Optional[Storage]
                 monitoring=_omit,  # type: Optional[Monitoring]
                 rbdMirroring=_omit,  # type: Optional[RbdMirroring]
                 removeOSDsIfOutAndSafeToRemove=_omit,  # type: Optional[bool]
                 external=_omit,  # type: Optional[External]
                 placement=_omit,  # type: Optional[Any]
                 resources=_omit,  # type: Optional[Any]
                 ):
        super(Spec, self).__init__(
            annotations=annotations,
            cephVersion=cephVersion,
            dashboard=dashboard,
            dataDirHostPath=dataDirHostPath,
            disruptionManagement=disruptionManagement,
            skipUpgradeChecks=skipUpgradeChecks,
            continueUpgradeAfterChecksEvenIfNotHealthy=continueUpgradeAfterChecksEvenIfNotHealthy,
            mon=mon,
            mgr=mgr,
            network=network,
            storage=storage,
            monitoring=monitoring,
            rbdMirroring=rbdMirroring,
            removeOSDsIfOutAndSafeToRemove=removeOSDsIfOutAndSafeToRemove,
            external=external,
            placement=placement,
            resources=resources,
        )

    @property
    def annotations(self):
        # type: () -> Any
        return self._property_impl('annotations')
    
    @annotations.setter
    def annotations(self, new_val):
        # type: (Optional[Any]) -> None
        self._annotations = new_val
    
    @property
    def cephVersion(self):
        # type: () -> CephVersion
        return self._property_impl('cephVersion')
    
    @cephVersion.setter
    def cephVersion(self, new_val):
        # type: (Optional[CephVersion]) -> None
        self._cephVersion = new_val
    
    @property
    def dashboard(self):
        # type: () -> Dashboard
        return self._property_impl('dashboard')
    
    @dashboard.setter
    def dashboard(self, new_val):
        # type: (Optional[Dashboard]) -> None
        self._dashboard = new_val
    
    @property
    def dataDirHostPath(self):
        # type: () -> str
        return self._property_impl('dataDirHostPath')
    
    @dataDirHostPath.setter
    def dataDirHostPath(self, new_val):
        # type: (Optional[str]) -> None
        self._dataDirHostPath = new_val
    
    @property
    def disruptionManagement(self):
        # type: () -> DisruptionManagement
        return self._property_impl('disruptionManagement')
    
    @disruptionManagement.setter
    def disruptionManagement(self, new_val):
        # type: (Optional[DisruptionManagement]) -> None
        self._disruptionManagement = new_val
    
    @property
    def skipUpgradeChecks(self):
        # type: () -> bool
        return self._property_impl('skipUpgradeChecks')
    
    @skipUpgradeChecks.setter
    def skipUpgradeChecks(self, new_val):
        # type: (Optional[bool]) -> None
        self._skipUpgradeChecks = new_val
    
    @property
    def continueUpgradeAfterChecksEvenIfNotHealthy(self):
        # type: () -> bool
        return self._property_impl('continueUpgradeAfterChecksEvenIfNotHealthy')
    
    @continueUpgradeAfterChecksEvenIfNotHealthy.setter
    def continueUpgradeAfterChecksEvenIfNotHealthy(self, new_val):
        # type: (Optional[bool]) -> None
        self._continueUpgradeAfterChecksEvenIfNotHealthy = new_val
    
    @property
    def mon(self):
        # type: () -> Mon
        return self._property_impl('mon')
    
    @mon.setter
    def mon(self, new_val):
        # type: (Optional[Mon]) -> None
        self._mon = new_val
    
    @property
    def mgr(self):
        # type: () -> Mgr
        return self._property_impl('mgr')
    
    @mgr.setter
    def mgr(self, new_val):
        # type: (Optional[Mgr]) -> None
        self._mgr = new_val
    
    @property
    def network(self):
        # type: () -> Network
        return self._property_impl('network')
    
    @network.setter
    def network(self, new_val):
        # type: (Optional[Network]) -> None
        self._network = new_val
    
    @property
    def storage(self):
        # type: () -> Storage
        return self._property_impl('storage')
    
    @storage.setter
    def storage(self, new_val):
        # type: (Optional[Storage]) -> None
        self._storage = new_val
    
    @property
    def monitoring(self):
        # type: () -> Monitoring
        return self._property_impl('monitoring')
    
    @monitoring.setter
    def monitoring(self, new_val):
        # type: (Optional[Monitoring]) -> None
        self._monitoring = new_val
    
    @property
    def rbdMirroring(self):
        # type: () -> RbdMirroring
        return self._property_impl('rbdMirroring')
    
    @rbdMirroring.setter
    def rbdMirroring(self, new_val):
        # type: (Optional[RbdMirroring]) -> None
        self._rbdMirroring = new_val
    
    @property
    def removeOSDsIfOutAndSafeToRemove(self):
        # type: () -> bool
        return self._property_impl('removeOSDsIfOutAndSafeToRemove')
    
    @removeOSDsIfOutAndSafeToRemove.setter
    def removeOSDsIfOutAndSafeToRemove(self, new_val):
        # type: (Optional[bool]) -> None
        self._removeOSDsIfOutAndSafeToRemove = new_val
    
    @property
    def external(self):
        # type: () -> External
        return self._property_impl('external')
    
    @external.setter
    def external(self, new_val):
        # type: (Optional[External]) -> None
        self._external = new_val
    
    @property
    def placement(self):
        # type: () -> Any
        return self._property_impl('placement')
    
    @placement.setter
    def placement(self, new_val):
        # type: (Optional[Any]) -> None
        self._placement = new_val
    
    @property
    def resources(self):
        # type: () -> Any
        return self._property_impl('resources')
    
    @resources.setter
    def resources(self, new_val):
        # type: (Optional[Any]) -> None
        self._resources = new_val


class CephCluster(CrdClass):
    _properties = [
        ('apiVersion', 'apiVersion', str, True, False),
        ('metadata', 'metadata', object, True, False),
        ('status', 'status', object, False, False),
        ('spec', 'spec', Spec, True, False)
    ]        

    def __init__(self,
                 apiVersion,  # type: str
                 metadata,  # type: Any
                 spec,  # type: Spec
                 status=_omit,  # type: Optional[Any]
                 ):
        super(CephCluster, self).__init__(
            apiVersion=apiVersion,
            metadata=metadata,
            spec=spec,
            status=status,
        )

    @property
    def apiVersion(self):
        # type: () -> str
        return self._property_impl('apiVersion')
    
    @apiVersion.setter
    def apiVersion(self, new_val):
        # type: (str) -> None
        self._apiVersion = new_val
    
    @property
    def metadata(self):
        # type: () -> Any
        return self._property_impl('metadata')
    
    @metadata.setter
    def metadata(self, new_val):
        # type: (Any) -> None
        self._metadata = new_val
    
    @property
    def status(self):
        # type: () -> Any
        return self._property_impl('status')
    
    @status.setter
    def status(self, new_val):
        # type: (Optional[Any]) -> None
        self._status = new_val
    
    @property
    def spec(self):
        # type: () -> Spec
        return self._property_impl('spec')
    
    @spec.setter
    def spec(self, new_val):
        # type: (Spec) -> None
        self._spec = new_val
