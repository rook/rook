{
  "version": "2.0",
  "service": "<p>The Cost Explorer API allows you to programmatically query your cost and usage data. You can query for aggregated data such as total monthly costs or total daily usage. You can also query for granular data, such as the number of daily write operations for DynamoDB database tables in your production environment. </p> <p>Service Endpoint</p> <p>The Cost Explorer API provides the following endpoint:</p> <ul> <li> <p>https://ce.us-east-1.amazonaws.com</p> </li> </ul>",
  "operations": {
    "GetCostAndUsage": "<p>Retrieve cost and usage metrics for your account. You can specify which cost and usage-related metric, such as <code>BlendedCosts</code> or <code>UsageQuantity</code>, that you want the request to return. You can also filter and group your data by various dimensions, such as <code>AWS Service</code> or <code>AvailabilityZone</code>, in a specific time range. See the <code>GetDimensionValues</code> action for a complete list of the valid dimensions. Master accounts in an organization have access to all member accounts.</p>",
    "GetDimensionValues": "<p>You can use <code>GetDimensionValues</code> to retrieve all available filter values for a specific filter over a period of time. You can search the dimension values for an arbitrary string. </p>",
    "GetReservationUtilization": "<p>You can retrieve the Reservation utilization for your account. Master accounts in an organization have access to their associated member accounts. You can filter data by dimensions in a time period. You can use <code>GetDimensionValues</code> to determine the possible dimension values. Currently, you can group only by <code>SUBSCRIPTION_ID</code>. </p>",
    "GetTags": "<p>You can query for available tag keys and tag values for a specified period. You can search the tag values for an arbitrary string. </p>"
  },
  "shapes": {
    "AttributeType": {
      "base": null,
      "refs": {
        "Attributes$key": null
      }
    },
    "AttributeValue": {
      "base": null,
      "refs": {
        "Attributes$value": null
      }
    },
    "Attributes": {
      "base": null,
      "refs": {
        "DimensionValuesWithAttributes$Attributes": "<p>The attribute that applies to a specific <code>Dimension</code>.</p>",
        "ReservationUtilizationGroup$Attributes": "<p>The attributes for this group of RIs.</p>"
      }
    },
    "Context": {
      "base": null,
      "refs": {
        "GetDimensionValuesRequest$Context": "<p>The context for the call to <code>GetDimensionValues</code>. This can be <code>RESERVED_INSTANCE</code> or <code>COST_AND_USAGE</code>. The default value is <code>COST_AND_USAGE</code>. If the context is set to <code>RESERVED_INSTANCE</code>, the resulting dimension values can be used in the <code>GetReservationUtilization</code> action. If the context is set to <code>COST_AND_USAGE</code>, , the resulting dimension values can be used in the <code>GetCostAndUsage</code> operation.</p> <p>If you set the context to <code>CostAndUsage</code>, you can use the following dimensions for searching:</p> <ul> <li> <p>AZ - The Availability Zone. An example is us-east-1a.</p> </li> <li> <p>InstanceType - The type of EC2 instance. An example is m4.xlarge.</p> </li> <li> <p>LinkedAccount - The description in the attribute map that includes the full name of the member account. The value field contains the AWS ID of the member account</p> </li> <li> <p>Operation - The action performed. Examples include RunInstance and CreateBucket.</p> </li> <li> <p>PurchaseType - The reservation type of the purchase to which this usage is related. Examples include: On Demand Instances and Standard Reserved Instances</p> </li> <li> <p>Service - The AWS service such as DynamoDB.</p> </li> <li> <p>UsageType -The type of usage. An example is DataTransfer-In-Bytes. The response for the GetDimensionValues action includes a unit attribute, examples of which include GB and Hrs.</p> </li> <li> <p>UsageTypeGroup - The grouping of common usage types. An example is EC2: CloudWatch – Alarms. The response for this action includes a unit attribute.</p> </li> <li> <p>RecordType - The different types of charges such as RI fees, usage costs, tax refunds, and credits</p> </li> </ul> <p>If you set the context to <code>ReservedInstance</code>, you can use the following dimensions for searching:</p> <ul> <li> <p>AZ - The Availability Zone. An example is us-east-1a.</p> </li> <li> <p>InstanceType - The type of EC2 instance. An example is m4.xlarge.</p> </li> <li> <p>LinkedAccount - The description in the attribute map that includes the full name of the member account. The value field contains the AWS ID of the member account</p> </li> <li> <p>Platform - The operating system. Examples are Windows or Linux.</p> </li> <li> <p>Region - The AWS region.</p> </li> <li> <p>Scope - The scope of a reserved instance (RI). Values are regional or a single availability zone.</p> </li> <li> <p>Tenancy - The tenancy of a resource. Examples are shared or dedicated.</p> </li> </ul>"
      }
    },
    "DateInterval": {
      "base": "<p>The time period that you want the usage and costs for. </p>",
      "refs": {
        "GetCostAndUsageRequest$TimePeriod": "<p>Sets the start and end dates for retrieving AWS costs. The start date is inclusive, but the end date is exclusive. For example, if <code>start</code> is <code>2017-01-01</code> and <code>end</code> is <code>2017-05-01</code>, then the cost and usage data is retrieved from <code>2017-01-01</code> up to and including <code>2017-04-30</code> but not including <code>2017-05-01</code>.</p>",
        "GetDimensionValuesRequest$TimePeriod": "<p>The start and end dates for retrieving the dimension values. The start date is inclusive, but the end date is exclusive. For example, if <code>start</code> is <code>2017-01-01</code> and <code>end</code> is <code>2017-05-01</code>, then the cost and usage data is retrieved from <code>2017-01-01</code> up to and including <code>2017-04-30</code> but not including <code>2017-05-01</code>.</p>",
        "GetReservationUtilizationRequest$TimePeriod": "<p>Sets the start and end dates for retrieving reserve instance (RI) utilization. The start date is inclusive, but the end date is exclusive. For example, if <code>start</code> is <code>2017-01-01</code> and <code>end</code> is <code>2017-05-01</code>, then the cost and usage data is retrieved from <code>2017-01-01</code> up to and including <code>2017-04-30</code> but not including <code>2017-05-01</code>. </p>",
        "GetTagsRequest$TimePeriod": "<p>The start and end dates for retrieving the dimension values. The start date is inclusive, but the end date is exclusive. For example, if <code>start</code> is <code>2017-01-01</code> and <code>end</code> is <code>2017-05-01</code>, then the cost and usage data is retrieved from <code>2017-01-01</code> up to and including <code>2017-04-30</code> but not including <code>2017-05-01</code>.</p>",
        "ResultByTime$TimePeriod": "<p>The time period covered by a result.</p>",
        "UtilizationByTime$TimePeriod": "<p>The period of time over which this utilization was used.</p>"
      }
    },
    "Dimension": {
      "base": null,
      "refs": {
        "DimensionValues$Key": "<p>The names of the metadata types that you can use to filter and group your results. For example, <code>AZ</code> returns a list of Availability Zones.</p>",
        "GetDimensionValuesRequest$Dimension": "<p>The name of the dimension. Different <code>Dimensions</code>are available for different <code>Context</code>s. For more information, see <code>Context</code>.</p>"
      }
    },
    "DimensionValues": {
      "base": "<p>The metadata that you can use to filter and group your results. You can use <code>GetDimensionValues</code> to find specific values.</p>",
      "refs": {
        "Expression$Dimensions": "<p>The specific <code>Dimension</code> to use for <code>Expression</code>.</p>"
      }
    },
    "DimensionValuesWithAttributes": {
      "base": "<p>The metadata of a specific type that you can use to filter and group your results. You can use <code>GetDimensionValues</code> to find specific values.</p>",
      "refs": {
        "DimensionValuesWithAttributesList$member": null
      }
    },
    "DimensionValuesWithAttributesList": {
      "base": null,
      "refs": {
        "GetDimensionValuesResponse$DimensionValues": "<p>The filters that you used to filter your request. Some dimensions are available only for a specific context:</p> <p>If you set the context to <code>CostAndUsage</code>, you can use the following dimensions for searching:</p> <ul> <li> <p>AZ - The Availability Zone. An example is us-east-1a.</p> </li> <li> <p>InstanceType - The type of EC2 instance. An example is m4.xlarge.</p> </li> <li> <p>LinkedAccount - The description in the attribute map that includes the full name of the member account. The value field contains the AWS ID of the member account</p> </li> <li> <p>Operation - The action performed. Examples include RunInstance and CreateBucket.</p> </li> <li> <p>PurchaseType - The reservation type of the purchase to which this usage is related. Examples include: On Demand Instances and Standard Reserved Instances</p> </li> <li> <p>Service - The AWS service such as DynamoDB.</p> </li> <li> <p>UsageType -The type of usage. An example is DataTransfer-In-Bytes. The response for the GetDimensionValues action includes a unit attribute, examples of which include GB and Hrs.</p> </li> <li> <p>UsageTypeGroup - The grouping of common usage types. An example is EC2: CloudWatch – Alarms. The response for this action includes a unit attribute.</p> </li> <li> <p>RecordType - The different types of charges such as RI fees, usage costs, tax refunds, and credits</p> </li> </ul> <p>If you set the context to <code>ReservedInstance</code>, you can use the following dimensions for searching:</p> <ul> <li> <p>AZ - The Availability Zone. An example is us-east-1a.</p> </li> <li> <p>InstanceType - The type of EC2 instance. An example is m4.xlarge.</p> </li> <li> <p>LinkedAccount - The description in the attribute map that includes the full name of the member account. The value field contains the AWS ID of the member account</p> </li> <li> <p>Platform - The operating system. Examples are Windows or Linux.</p> </li> <li> <p>Region - The AWS region.</p> </li> <li> <p>Scope - The scope of a reserved instance (RI). Values are regional or a single availability zone.</p> </li> <li> <p>Tenancy - The tenancy of a resource. Examples are shared or dedicated.</p> </li> </ul>"
      }
    },
    "Entity": {
      "base": null,
      "refs": {
        "TagList$member": null
      }
    },
    "ErrorMessage": {
      "base": null,
      "refs": {
        "LimitExceededException$Message": null
      }
    },
    "Estimated": {
      "base": null,
      "refs": {
        "ResultByTime$Estimated": "<p>Whether or not this result is estimated.</p>"
      }
    },
    "Expression": {
      "base": "<p>Use <code>Expression</code> to filter by cost or by usage. There are two patterns: </p> <ul> <li> <p>Simple dimension values - You can set the dimension name and values for the filters that you plan to use. For example, you can filter for <code>InstanceType==m4.xlarge OR InstanceType==c4.large</code>. The <code>Expression</code> for that looks like this.</p> <p> <code>{ \"Dimensions\": { \"Key\": \"InstanceType\", \"Values\": [ \"m4.xlarge\", “c4.large” ] } }</code> </p> <p>The list of dimension values are OR'd together to retrieve cost or usage data. You can create <code>Expression</code> and <code>DimensionValues</code> objects using either <code>with*</code> methods or <code>set*</code> methods in multiple lines. </p> </li> <li> <p>Compound dimension values with logical operations - You can use multiple <code>Expression</code> types and the logical operators <code>AND/OR/NOT</code> to create a list of one or more <code>Expression</code> objects. This allows you to filter on more advanced options. For example, you can filter on <code>((InstanceType == m4.large OR InstanceType == m3.large) OR (Tag.Type == Type1)) AND (UsageType != DataTransfer)</code>. The <code>Expression</code> for that looks like this.</p> <p> <code>{ \"And\": [ {\"Or\": [ {\"Dimensions\": { \"Key\": \"InstanceType\", \"Values\": [ \"m4.x.large\", \"c4.large\" ] }}, {\"Tag\": { \"Key\": \"TagName\", \"Values\": [\"Value1\"] } } ]}, {\"Not\": {\"dimensions\": { \"Key\": \"UsageType\", \"Values\": [\"DataTransfer\"] }}} ] } </code> </p> <note> <p>Because each <code>Expression</code> can have only one operator, the service returns an error if more than one is specified. The following example shows an Expression object that will create an error.</p> </note> <p> <code> { \"And\": [ ... ], \"DimensionValues\": { \"Dimension\": \"UsageType\", \"Values\": [ \"DataTransfer\" ] } } </code> </p> </li> </ul>",
      "refs": {
        "Expression$Not": "<p>Return results that don't match <code>Dimension</code>.</p>",
        "Expressions$member": null,
        "GetCostAndUsageRequest$Filter": "<p>Filters AWS costs by different dimensions. For example, you can specify <code>Service</code> and <code>Linked Account</code> and get the costs associated with that account's usage of that service. You can nest <code>Expression</code> objects to define any combination of dimension filters. For more information, see the <code>Expression</code> object or <code>More Examples</code>. </p>",
        "GetReservationUtilizationRequest$Filter": "<p>Filters utilization data by using different dimensions. <code>GetReservationUtilization</code> uses the same <code>Expression</code> object as the other operations, but only <code>AND</code> is supported among each dimension, and nesting is supported up to only one level deep. If there are multiple values for a dimension, they are OR'd together.</p>"
      }
    },
    "Expressions": {
      "base": null,
      "refs": {
        "Expression$Or": "<p>Return results that match either <code>Dimension</code>.</p>",
        "Expression$And": "<p>Return results that match both <code>Dimension</code> objects.</p>"
      }
    },
    "GetCostAndUsageRequest": {
      "base": null,
      "refs": {
      }
    },
    "GetCostAndUsageResponse": {
      "base": null,
      "refs": {
      }
    },
    "GetDimensionValuesRequest": {
      "base": null,
      "refs": {
      }
    },
    "GetDimensionValuesResponse": {
      "base": null,
      "refs": {
      }
    },
    "GetReservationUtilizationRequest": {
      "base": null,
      "refs": {
      }
    },
    "GetReservationUtilizationResponse": {
      "base": null,
      "refs": {
      }
    },
    "GetTagsRequest": {
      "base": null,
      "refs": {
      }
    },
    "GetTagsResponse": {
      "base": null,
      "refs": {
      }
    },
    "Granularity": {
      "base": null,
      "refs": {
        "GetCostAndUsageRequest$Granularity": "<p>Sets the AWS cost granularity to <code>MONTHLY</code> or <code>DAILY</code>.</p>",
        "GetReservationUtilizationRequest$Granularity": "<p>Sets the AWS cost granularity to <code>MONTHLY</code> or <code>DAILY</code>. If both <code>GroupBy</code> and <code>granularity</code> are not set, <code>GetReservationUtilization</code> defaults to <code>DAILY</code>. If <code>GroupBy</code> is set, <code>Granularity</code> can't be set, and the response object doesn't include <code>MONTHLY</code> or <code>DAILY</code> granularity.</p>"
      }
    },
    "Group": {
      "base": "<p>One level of grouped data within the results.</p>",
      "refs": {
        "Groups$member": null
      }
    },
    "GroupDefinition": {
      "base": "<p>Represents a group when you specify a group by criteria, or in the response to a query with a specific grouping.</p>",
      "refs": {
        "GroupDefinitions$member": null
      }
    },
    "GroupDefinitionKey": {
      "base": null,
      "refs": {
        "GroupDefinition$Key": "<p>The string that represents a key for a specified group.</p>"
      }
    },
    "GroupDefinitionType": {
      "base": null,
      "refs": {
        "GroupDefinition$Type": "<p>The string that represents the type of group.</p>"
      }
    },
    "GroupDefinitions": {
      "base": null,
      "refs": {
        "GetCostAndUsageRequest$GroupBy": "<p>You can group AWS costs using up to two different groups, either dimensions, tag keys, or both.</p> <p>When you group by tag key, you get all tag values, including empty strings.</p> <p>Valid values are: <code>AZ</code>, <code>INSTANCE_TYPE</code>, <code>LINKED_ACCCOUNT</code>, <code>OPERATION</code>, <code>PURCHASE_TYPE</code>, <code>SERVICE</code>, <code>USAGE_TYPE</code>, <code>TAGS</code>, and <code>PLATFORM</code>.</p>",
        "GetCostAndUsageResponse$GroupDefinitions": "<p>The groups specified by the the <code>Filter</code> or <code>GroupBy</code> parameters in the request.</p>",
        "GetReservationUtilizationRequest$GroupBy": "<p>Groups only by <code>SubscriptionId</code>. Metadata is included.</p>"
      }
    },
    "Groups": {
      "base": null,
      "refs": {
        "ResultByTime$Groups": "<p>The groups that are included in this time period.</p>"
      }
    },
    "Key": {
      "base": null,
      "refs": {
        "Keys$member": null
      }
    },
    "Keys": {
      "base": null,
      "refs": {
        "Group$Keys": "<p>The keys included in this group.</p>"
      }
    },
    "LimitExceededException": {
      "base": "<p>You made too many calls in a short period of time. Try again later.</p>",
      "refs": {
      }
    },
    "MetricAmount": {
      "base": null,
      "refs": {
        "MetricValue$Amount": "<p>The actual number that represents the metric.</p>"
      }
    },
    "MetricName": {
      "base": null,
      "refs": {
        "MetricNames$member": null,
        "Metrics$key": null
      }
    },
    "MetricNames": {
      "base": null,
      "refs": {
        "GetCostAndUsageRequest$Metrics": "<p>Which metrics are returned in the query. For more information about blended and unblended rates, see https://aws.amazon.com/premiumsupport/knowledge-center/blended-rates-intro/. </p> <p>Valid values are <code>BlendedCost</code>, <code>UnblendedCost</code>, and <code>UsageQuantity</code>.</p> <note> <p>If you return the <code>UsageQuantity</code> metric, the service aggregates all usage numbers without taking into account the units. For example, if you aggregate <code>usageQuantity</code> across all of EC2, the results aren't meaningful because EC2 compute hours and data transfer are measured in different units (for example, hours vs. GB). To get more meaningful <code>UsageQuantity</code> metrics, filter by <code>UsageType</code> or <code>UsageTypeGroups</code>. </p> </note>"
      }
    },
    "MetricUnit": {
      "base": null,
      "refs": {
        "MetricValue$Unit": "<p>The unit that the metric is given in.</p>"
      }
    },
    "MetricValue": {
      "base": "<p>The aggregated value for a metric.</p>",
      "refs": {
        "Metrics$value": null
      }
    },
    "Metrics": {
      "base": null,
      "refs": {
        "Group$Metrics": "<p>The metrics included in this group.</p>",
        "ResultByTime$Total": "<p>The total amount of cost or usage accrued during the time period.</p>"
      }
    },
    "NextPageToken": {
      "base": null,
      "refs": {
        "GetCostAndUsageRequest$NextPageToken": "<p>The token to retrieve the next set of results. AWS provides the token when the response from a previous call has more results than the maximum page size.</p>",
        "GetCostAndUsageResponse$NextPageToken": "<p>The token for the next set of retrievable results. AWS provides the token when the response from a previous call has more results than the maximum page size.</p>",
        "GetDimensionValuesRequest$NextPageToken": "<p>The token to retrieve the next set of results. AWS provides the token when the response from a previous call has more results than the maximum page size.</p>",
        "GetDimensionValuesResponse$NextPageToken": "<p>The token for the next set of retrievable results. AWS provides the token when the response from a previous call has more results than the maximum page size.</p>",
        "GetReservationUtilizationRequest$NextPageToken": "<p>The token to retrieve the next set of results. AWS provides the token when the response from a previous call has more results than the maximum page size.</p>",
        "GetReservationUtilizationResponse$NextPageToken": "<p>The token for the next set of retrievable results. AWS provides the token when the response from a previous call has more results than the maximum page size.</p>",
        "GetTagsRequest$NextPageToken": "<p>The token to retrieve the next set of results. AWS provides the token when the response from a previous call has more results than the maximum page size.</p>",
        "GetTagsResponse$NextPageToken": "<p>The token for the next set of retrievable results. AWS provides the token when the response from a previous call has more results than the maximum page size.</p>"
      }
    },
    "PageSize": {
      "base": null,
      "refs": {
        "GetDimensionValuesResponse$ReturnSize": "<p>The number of results that AWS returned at one time.</p>",
        "GetDimensionValuesResponse$TotalSize": "<p>The total number of search results.</p>",
        "GetTagsResponse$ReturnSize": "<p>The number of query results that AWS returns at a time.</p>",
        "GetTagsResponse$TotalSize": "<p>The total number of query results.</p>"
      }
    },
    "PurchasedHours": {
      "base": null,
      "refs": {
        "ReservationAggregates$PurchasedHours": "<p>How many RI hours you purchased.</p>"
      }
    },
    "ReservationAggregates": {
      "base": "<p>The aggregated numbers for your RI usage.</p>",
      "refs": {
        "GetReservationUtilizationResponse$Total": "<p>The total amount of time that you utilized your RIs.</p>",
        "ReservationUtilizationGroup$Utilization": "<p>How much you used this group of RIs.</p>",
        "UtilizationByTime$Total": "<p>The total number of RI hours that were used.</p>"
      }
    },
    "ReservationGroupKey": {
      "base": null,
      "refs": {
        "ReservationUtilizationGroup$Key": "<p>The key for a specific RI attribute.</p>"
      }
    },
    "ReservationGroupValue": {
      "base": null,
      "refs": {
        "ReservationUtilizationGroup$Value": "<p>The value of a specific RI attribute.</p>"
      }
    },
    "ReservationUtilizationGroup": {
      "base": "<p>A group of RIs that share a set of attributes.</p>",
      "refs": {
        "ReservationUtilizationGroups$member": null
      }
    },
    "ReservationUtilizationGroups": {
      "base": null,
      "refs": {
        "UtilizationByTime$Groups": "<p>The groups that are included in this utilization result.</p>"
      }
    },
    "ResultByTime": {
      "base": "<p>The result that is associated with a time period.</p>",
      "refs": {
        "ResultsByTime$member": null
      }
    },
    "ResultsByTime": {
      "base": null,
      "refs": {
        "GetCostAndUsageResponse$ResultsByTime": "<p>The time period covered by the results in the response.</p>"
      }
    },
    "SearchString": {
      "base": null,
      "refs": {
        "GetDimensionValuesRequest$SearchString": "<p>The value that you want to search the filter values for.</p>",
        "GetTagsRequest$SearchString": "<p>The value that you want to search for.</p>"
      }
    },
    "TagKey": {
      "base": null,
      "refs": {
        "GetTagsRequest$TagKey": "<p>The key of the tag that you want to return values for.</p>",
        "TagValues$Key": "<p>The key for a tag.</p>"
      }
    },
    "TagList": {
      "base": null,
      "refs": {
        "GetTagsResponse$Tags": "<p>The tags that match your request.</p>"
      }
    },
    "TagValues": {
      "base": "<p>The values that are available for a tag.</p>",
      "refs": {
        "Expression$Tags": "<p>The specific <code>Tag</code> to use for <code>Expression</code>.</p>"
      }
    },
    "TotalActualHours": {
      "base": null,
      "refs": {
        "ReservationAggregates$TotalActualHours": "<p>The total number of RI hours that you used.</p>"
      }
    },
    "UnusedHours": {
      "base": null,
      "refs": {
        "ReservationAggregates$UnusedHours": "<p>The number of RI hours that you didn't use.</p>"
      }
    },
    "UtilizationByTime": {
      "base": "<p>The amount of utilization, in hours.</p>",
      "refs": {
        "UtilizationsByTime$member": null
      }
    },
    "UtilizationPercentage": {
      "base": null,
      "refs": {
        "ReservationAggregates$UtilizationPercentage": "<p>The percentage of RI time that you used.</p>"
      }
    },
    "UtilizationsByTime": {
      "base": null,
      "refs": {
        "GetReservationUtilizationResponse$UtilizationsByTime": "<p>The amount of time that you utilized your RIs.</p>"
      }
    },
    "Value": {
      "base": null,
      "refs": {
        "DimensionValuesWithAttributes$Value": "<p>The value of a dimension with a specific attribute.</p>",
        "Values$member": null
      }
    },
    "Values": {
      "base": null,
      "refs": {
        "DimensionValues$Values": "<p>The metadata values that you can use to filter and group your results. You can use <code>GetDimensionValues</code> to find specific values.</p>",
        "TagValues$Values": "<p>The specific value of a tag.</p>"
      }
    },
    "YearMonthDay": {
      "base": null,
      "refs": {
        "DateInterval$Start": "<p>The beginning of the time period that you want the usage and costs for. The start date is inclusive. For example, if <code>start</code> is <code>2017-01-01</code>, then the cost and usage data is retrieved starting at <code>2017-01-01</code> up to the end date.</p>",
        "DateInterval$End": "<p>The end of the time period that you want the usage and costs for. The end date is exclusive. For example, if the <code>end</code> is <code>2017-05-01</code>, then the cost and usage data is retrieved from the start date but not including <code>2017-05-01</code>.</p>"
      }
    }
  }
}
