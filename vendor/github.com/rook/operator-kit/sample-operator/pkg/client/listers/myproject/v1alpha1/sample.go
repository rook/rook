/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/rook/operator-kit/sample-operator/pkg/apis/myproject/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// SampleLister helps list Samples.
type SampleLister interface {
	// List lists all Samples in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.Sample, err error)
	// Samples returns an object that can list and get Samples.
	Samples(namespace string) SampleNamespaceLister
	SampleListerExpansion
}

// sampleLister implements the SampleLister interface.
type sampleLister struct {
	indexer cache.Indexer
}

// NewSampleLister returns a new SampleLister.
func NewSampleLister(indexer cache.Indexer) SampleLister {
	return &sampleLister{indexer: indexer}
}

// List lists all Samples in the indexer.
func (s *sampleLister) List(selector labels.Selector) (ret []*v1alpha1.Sample, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Sample))
	})
	return ret, err
}

// Samples returns an object that can list and get Samples.
func (s *sampleLister) Samples(namespace string) SampleNamespaceLister {
	return sampleNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// SampleNamespaceLister helps list and get Samples.
type SampleNamespaceLister interface {
	// List lists all Samples in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.Sample, err error)
	// Get retrieves the Sample from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.Sample, error)
	SampleNamespaceListerExpansion
}

// sampleNamespaceLister implements the SampleNamespaceLister
// interface.
type sampleNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Samples in the indexer for a given namespace.
func (s sampleNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.Sample, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Sample))
	})
	return ret, err
}

// Get retrieves the Sample from the indexer for a given namespace and name.
func (s sampleNamespaceLister) Get(name string) (*v1alpha1.Sample, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("sample"), name)
	}
	return obj.(*v1alpha1.Sample), nil
}
