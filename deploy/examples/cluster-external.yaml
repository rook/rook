#################################################################################################################
# Define the settings for the rook-ceph-external cluster with common settings for a production cluster.

# For example, if Rook is not managing any existing cluster in the 'rook-ceph' namespace do:
#   kubectl create -f crds.yaml -f common.yaml -f operator.yaml
#   kubectl create -f cluster-external.yaml

# If there is already a cluster managed by Rook in 'rook-ceph' then do:
#   kubectl create -f common-external.yaml
#   kubectl create -f cluster-external.yaml
#################################################################################################################
apiVersion: ceph.rook.io/v1
kind: CephCluster
metadata:
  name: rook-ceph-external
  namespace: rook-ceph-external # namespace:cluster
spec:
  external:
    enable: true
  crashCollector:
    disable: true
  healthCheck:
    daemonHealth:
      mon:
        disabled: false
        interval: 45s
  # optionally, the ceph-mgr IP address can be passed to gather metric from the prometheus exporter
  # monitoring:
  #   enabled: true
  #   rulesNamespace: rook-ceph
  #   externalMgrEndpoints:
      #- ip: ip
      # externalMgrPrometheusPort: 9283
    # prometheus rule alerts values for overriding default prometheus rules values
    # Notes:
    # 1. Specific alerts can be disabled by setting disabled field to true
    # 2. The difference between severityLevel and severity fields is:
    #    severityLevel - is an annotation for marking warning/critical/error in ceph dashboard UI.
    #    severity - is a label that can be used by Prometheus AlertManager for sending alerts based on this label.
    #alertRuleOverrides:
    #  PersistentVolumeUsageNearFull:
    #    limit: 80
    #    for: 1m
    #    severityLevel: warning # must be warning, critical, or error
    #    severity: custom-severity
