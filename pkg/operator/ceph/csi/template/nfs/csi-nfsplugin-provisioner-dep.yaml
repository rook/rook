kind: Deployment
apiVersion: apps/v1
metadata:
  name: csi-nfsplugin-provisioner
  namespace: {{ .Namespace }}
spec:
  replicas: {{ .ProvisionerReplicas }}
  selector:
    matchLabels:
     app: csi-nfsplugin-provisioner
  template:
    metadata:
      labels:
        app: csi-nfsplugin-provisioner
        {{ range $key, $value := .CSINFSPodLabels }}
        {{ $key }}: "{{ $value }}"
        {{ end }}
    spec:
      securityContext: {}
      serviceAccountName: rook-csi-nfs-provisioner-sa
      {{ if .ProvisionerPriorityClassName }}
      priorityClassName: {{ .ProvisionerPriorityClassName }}
      {{ end }}
      containers:
        {{ if .NFSAttachRequired }}
        - name: csi-attacher
          image: {{ .AttacherImage }}
          args:
            - "--v={{ .SidecarLogLevel }}"
            - "--csi-address=$(ADDRESS)"
            - "--leader-election=true"
            - "--timeout={{ .GRPCTimeout }}"
            - "--leader-election-namespace={{ .Namespace }}"
            - "--leader-election-lease-duration={{ .LeaderElectionLeaseDuration }}"
            - "--leader-election-renew-deadline={{ .LeaderElectionRenewDeadline }}"
            - "--leader-election-retry-period={{ .LeaderElectionRetryPeriod }}"
            {{ if .KubeApiBurst }}
            - "--kube-api-burst={{ .KubeApiBurst }}"
            {{ end }}
            {{ if .KubeApiQPS }}
            - "--kube-api-qps={{ .KubeApiQPS }}"
            {{ end }}
          env:
            - name: ADDRESS
              value: /csi/csi-provisioner.sock
          imagePullPolicy: {{ .ImagePullPolicy }}
<<<<<<< HEAD
=======
          securityContext:
            capabilities:
              add: []
              drop: ["ALL"]
>>>>>>> fc08e87d4 (Revert "object: create cosi user for each object store")
          volumeMounts:
            - name: socket-dir
              mountPath: /csi
        {{ end }}
        {{ if .EnableNFSSnapshotter }}
        - name: csi-snapshotter
          image:  {{ .SnapshotterImage }}
          args:
            - "--csi-address=$(ADDRESS)"
            - "--v={{ .SidecarLogLevel }}"
            - "--timeout={{ .GRPCTimeout }}"
            - "--leader-election=true"
            - "--leader-election-namespace={{ .Namespace }}"
            - "--leader-election-lease-duration={{ .LeaderElectionLeaseDuration }}"
            - "--leader-election-renew-deadline={{ .LeaderElectionRenewDeadline }}"
            - "--leader-election-retry-period={{ .LeaderElectionRetryPeriod }}"
            - "--extra-create-metadata=true"
            {{ if .KubeApiBurst }}
            - "--kube-api-burst={{ .KubeApiBurst }}"
            {{ end }}
            {{ if .KubeApiQPS }}
            - "--kube-api-qps={{ .KubeApiQPS }}"
            {{ end }}
          env:
            - name: ADDRESS
              value: unix:///csi/csi-provisioner.sock
          imagePullPolicy: {{ .ImagePullPolicy }}
<<<<<<< HEAD
=======
          securityContext:
            capabilities:
              add: []
              drop: ["ALL"]
>>>>>>> fc08e87d4 (Revert "object: create cosi user for each object store")
          volumeMounts:
            - name: socket-dir
              mountPath: /csi
        {{ end }}
        - name: csi-resizer
          image: {{ .ResizerImage }}
          args:
            - "--csi-address=$(ADDRESS)"
            - "--v={{ .SidecarLogLevel }}"
            - "--timeout={{ .GRPCTimeout }}"
            - "--leader-election=true"
            - "--leader-election-namespace={{ .Namespace }}"
            - "--leader-election-lease-duration={{ .LeaderElectionLeaseDuration }}"
            - "--leader-election-renew-deadline={{ .LeaderElectionRenewDeadline }}"
            - "--leader-election-retry-period={{ .LeaderElectionRetryPeriod }}"
            - "--handle-volume-inuse-error=false"
            - "--feature-gates=RecoverVolumeExpansionFailure=true"
            {{ if .KubeApiBurst }}
            - "--kube-api-burst={{ .KubeApiBurst }}"
            {{ end }}
            {{ if .KubeApiQPS }}
            - "--kube-api-qps={{ .KubeApiQPS }}"
            {{ end }}
          env:
            - name: ADDRESS
              value: unix:///csi/csi-provisioner.sock
          imagePullPolicy: {{ .ImagePullPolicy }}
<<<<<<< HEAD
=======
          securityContext:
            capabilities:
              add: []
              drop: ["ALL"]
>>>>>>> fc08e87d4 (Revert "object: create cosi user for each object store")
          volumeMounts:
            - name: socket-dir
              mountPath: /csi
        - name: csi-provisioner
          image: {{ .ProvisionerImage }}
          args:
            - "--csi-address=$(ADDRESS)"
            - "--v={{ .SidecarLogLevel }}"
            - "--timeout={{ .GRPCTimeout }}"
            - "--retry-interval-start=500ms"
            - "--leader-election=true"
            - "--leader-election-namespace={{ .Namespace }}"
            - "--feature-gates=HonorPVReclaimPolicy=true"
            - "--prevent-volume-mode-conversion=true"
            - "--leader-election-lease-duration={{ .LeaderElectionLeaseDuration }}"
            - "--leader-election-renew-deadline={{ .LeaderElectionRenewDeadline }}"
            - "--leader-election-retry-period={{ .LeaderElectionRetryPeriod }}"
            {{ if .KubeApiBurst }}
            - "--kube-api-burst={{ .KubeApiBurst }}"
            {{ end }}
            {{ if .KubeApiQPS }}
            - "--kube-api-qps={{ .KubeApiQPS }}"
            {{ end }}
          env:
            - name: ADDRESS
              value: unix:///csi/csi-provisioner.sock
          imagePullPolicy: {{ .ImagePullPolicy }}
<<<<<<< HEAD
=======
          securityContext:
            capabilities:
              add: []
              drop: ["ALL"]
>>>>>>> fc08e87d4 (Revert "object: create cosi user for each object store")
          volumeMounts:
            - name: socket-dir
              mountPath: /csi
        - name: csi-nfsplugin
          image: {{ .CSIPluginImage }}
          args:
            - "--nodeid=$(NODE_ID)"
            - "--type=nfs"
            - "--endpoint=$(CSI_ENDPOINT)"
            - "--v={{ .LogLevel }}"
            - "--controllerserver=true"
            - "--drivername={{ .DriverNamePrefix }}nfs.csi.ceph.com"
            - "--pidlimit=-1"
            {{ if .CSILogRotation }}
            - "--logtostderr=false"
            - "--alsologtostderr=true"
            - "--log_file={{ .CsiLogRootPath }}/log/{{ .CsiComponentName }}/csi-nfsplugin.log"
            {{ end }}
          env:
            - name: POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: NODE_ID
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: CSI_ENDPOINT
              value: unix:///csi/csi-provisioner.sock
          imagePullPolicy: {{ .ImagePullPolicy }}
          {{ if and .Privileged .CSILogRotation }}
          securityContext:
            privileged: true
            capabilities:
              drop: ["ALL"]
          {{ end }}
          volumeMounts:
            - name: socket-dir
              mountPath: /csi
            - name: host-sys
              mountPath: /sys
            - name: lib-modules
              mountPath: /lib/modules
              readOnly: true
            - name: host-dev
              mountPath: /dev
            - name: ceph-csi-config
              mountPath: /etc/ceph-csi-config/
            - name: keys-tmp-dir
              mountPath: /tmp/csi/keys
            {{ if .CSILogRotation }}
            - mountPath: {{ .CsiLogRootPath }}/log/{{ .CsiComponentName }}
              name: csi-log
            {{ end }}
            {{ if .MountCustomCephConf }}
            - name: ceph-config
              mountPath: /etc/ceph/ceph.conf
              subPath: ceph.conf
            {{ end }}
      volumes:
        - name: socket-dir
          emptyDir: {
            medium: "Memory"
          }
        - name: host-sys
          hostPath:
            path: /sys
        - name: lib-modules
          hostPath:
            path: /lib/modules
        - name: host-dev
          hostPath:
            path: /dev
        - name: ceph-csi-config
          configMap:
            name: rook-ceph-csi-config
            items:
              - key: csi-cluster-config-json
                path: config.json
        - name: keys-tmp-dir
          emptyDir: {
            medium: "Memory"
          }
        {{ if .CSILogRotation }}
        - name: csi-log
          hostPath:
            path: {{ .CsiLogRootPath }}/log/{{ .CsiComponentName }}
            type: DirectoryOrCreate
        - name: csi-logs-logrotate
          emptyDir:
            type: DirectoryOrCreate
        {{ end }}
        {{ if .MountCustomCephConf }}
        - name: ceph-config
          configMap:
            name: csi-ceph-conf-override
            items:
            - key: ceph.conf
              path: ceph.conf
        {{ end }}
