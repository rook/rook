/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/rook/rook/pkg/apis/rook.io/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// VolumeAttachmentLister helps list VolumeAttachments.
type VolumeAttachmentLister interface {
	// List lists all VolumeAttachments in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.VolumeAttachment, err error)
	// VolumeAttachments returns an object that can list and get VolumeAttachments.
	VolumeAttachments(namespace string) VolumeAttachmentNamespaceLister
	VolumeAttachmentListerExpansion
}

// volumeAttachmentLister implements the VolumeAttachmentLister interface.
type volumeAttachmentLister struct {
	indexer cache.Indexer
}

// NewVolumeAttachmentLister returns a new VolumeAttachmentLister.
func NewVolumeAttachmentLister(indexer cache.Indexer) VolumeAttachmentLister {
	return &volumeAttachmentLister{indexer: indexer}
}

// List lists all VolumeAttachments in the indexer.
func (s *volumeAttachmentLister) List(selector labels.Selector) (ret []*v1alpha1.VolumeAttachment, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.VolumeAttachment))
	})
	return ret, err
}

// VolumeAttachments returns an object that can list and get VolumeAttachments.
func (s *volumeAttachmentLister) VolumeAttachments(namespace string) VolumeAttachmentNamespaceLister {
	return volumeAttachmentNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// VolumeAttachmentNamespaceLister helps list and get VolumeAttachments.
type VolumeAttachmentNamespaceLister interface {
	// List lists all VolumeAttachments in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.VolumeAttachment, err error)
	// Get retrieves the VolumeAttachment from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.VolumeAttachment, error)
	VolumeAttachmentNamespaceListerExpansion
}

// volumeAttachmentNamespaceLister implements the VolumeAttachmentNamespaceLister
// interface.
type volumeAttachmentNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all VolumeAttachments in the indexer for a given namespace.
func (s volumeAttachmentNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.VolumeAttachment, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.VolumeAttachment))
	})
	return ret, err
}

// Get retrieves the VolumeAttachment from the indexer for a given namespace and name.
func (s volumeAttachmentNamespaceLister) Get(name string) (*v1alpha1.VolumeAttachment, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("volumeattachment"), name)
	}
	return obj.(*v1alpha1.VolumeAttachment), nil
}
